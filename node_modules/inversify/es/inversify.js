import*as t from"@inversifyjs/common";import*as n from"@inversifyjs/core";var e={d:(t,n)=>{for(var i in n)e.o(n,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:n[i]})},o:(t,n)=>Object.prototype.hasOwnProperty.call(t,n),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},i={};e.d(i,{QC:()=>qt,bU:()=>m,XK:()=>A,mc:()=>Ot,i0:()=>Bt,FU:()=>b.LazyServiceIdentifier,KK:()=>on,PG:()=>j,$Z:()=>S,OZ:()=>Kt,Yi:()=>Ut,A$:()=>O,id:()=>T,WQ:()=>Qt,_G:()=>Ht,F$:()=>it,tt:()=>Xt,KT:()=>zt,dU:()=>St,lq:()=>Zt,kr:()=>en,E3:()=>rn,VK:()=>Yt,w:()=>At,je:()=>tn,Nu:()=>mt,if:()=>It,Fz:()=>Jt});var r={};e.r(r),e.d(r,{DESIGN_PARAM_TYPES:()=>p,INJECT_TAG:()=>s,MULTI_INJECT_TAG:()=>d,NAMED_TAG:()=>o,NAME_TAG:()=>a,NON_CUSTOM_TAG_KEYS:()=>g,OPTIONAL_TAG:()=>u,PARAM_TYPES:()=>h,POST_CONSTRUCT:()=>y,PRE_DESTROY:()=>v,TAGGED:()=>l,TAGGED_PROP:()=>f,UNMANAGED_TAG:()=>c});var o="named",a="name",c="unmanaged",u="optional",s="inject",d="multi_inject",l="inversify:tagged",f="inversify:tagged_props",h="inversify:paramtypes",p="design:paramtypes",y="post_construct",v="pre_destroy",g=[s,d,a,c,o,u];const b=(w={LazyServiceIdentifier:()=>t.LazyServiceIdentifier},_={},e.d(_,w),_);var w,_,m={Request:"Request",Singleton:"Singleton",Transient:"Transient"},A={ConstantValue:"ConstantValue",Constructor:"Constructor",DynamicValue:"DynamicValue",Factory:"Factory",Function:"Function",Instance:"Instance",Invalid:"Invalid",Provider:"Provider"},S={ClassProperty:"ClassProperty",ConstructorArgument:"ConstructorArgument",Variable:"Variable"},I=0;function T(){return I++}var D=function(){function t(t,n){this.id=T(),this.activated=!1,this.serviceIdentifier=t,this.scope=n,this.type=A.Invalid,this.constraint=function(t){return!0},this.implementationType=null,this.cache=null,this.factory=null,this.provider=null,this.onActivation=null,this.onDeactivation=null,this.dynamicValue=null}return t.prototype.clone=function(){var n=new t(this.serviceIdentifier,this.scope);return n.activated=n.scope===m.Singleton&&this.activated,n.implementationType=this.implementationType,n.dynamicValue=this.dynamicValue,n.scope=this.scope,n.type=this.type,n.factory=this.factory,n.provider=this.provider,n.constraint=this.constraint,n.onActivation=this.onActivation,n.onDeactivation=this.onDeactivation,n.cache=this.cache,n},t}(),C="Cannot apply @injectable decorator multiple times.",E="Metadata key was used more than once in a parameter:",x="NULL argument",N="Key Not Found",M="The @inject @multiInject @tagged and @named decorators must be applied to the parameters of a class constructor or a class property.",R=function(t,n){return"onDeactivation() error in class ".concat(t,": ").concat(n)},j=function(){function t(){}return t.prototype.getConstructorMetadata=function(t){var n,e=null!==(n=Reflect.getMetadata(p,t))&&void 0!==n?n:[],i=Reflect.getMetadata(l,t);return{compilerGeneratedMetadata:e,userGeneratedMetadata:null!=i?i:{}}},t.prototype.getPropertiesMetadata=function(t){var n;return null!==(n=Reflect.getMetadata(f,t))&&void 0!==n?n:{}},t}();const k=(t=>{var n={};return e.d(n,t),n})({ClassElementMetadataKind:()=>n.ClassElementMetadataKind,LegacyTargetImpl:()=>n.LegacyTargetImpl,getClassElementMetadataFromLegacyMetadata:()=>n.getClassElementMetadataFromLegacyMetadata,getTargets:()=>n.getTargets});var P;function F(t){return t instanceof RangeError||"Maximum call stack size exceeded"===t.message}function O(t){return"function"==typeof t?t.name:"symbol"==typeof t?t.toString():t}function B(t,n,e){var i="",r=e(t,n);return 0!==r.length&&(i="\nRegistered bindings:",r.forEach((function(t){var n="Object";null!==t.implementationType&&(n=W(t.implementationType)),i="".concat(i,"\n ").concat(n),t.constraint.metaData&&(i="".concat(i," - ").concat(t.constraint.metaData))}))),i}function q(t,n){return null!==t.parentRequest&&(t.parentRequest.serviceIdentifier===n||q(t.parentRequest,n))}function V(t){t.childRequests.forEach((function(n){if(q(t,n.serviceIdentifier)){var e=function(t){return function t(n,e){void 0===e&&(e=[]);var i=O(n.serviceIdentifier);return e.push(i),null!==n.parentRequest?t(n.parentRequest,e):e}(t).reverse().join(" --\x3e ")}(n);throw new Error("".concat("Circular dependency found:"," ").concat(e))}V(n)}))}function W(t){if(null!=t.name&&""!==t.name)return t.name;var n=t.toString(),e=n.match(/^function\s*([^\s(]+)/);return null===e?"Anonymous function: ".concat(n):e[1]}function K(t){return'{"key":"'.concat(t.key.toString(),'","value":"').concat(t.value.toString(),'"}')}!function(t){t[t.MultipleBindingsAvailable=2]="MultipleBindingsAvailable",t[t.NoBindingsAvailable=0]="NoBindingsAvailable",t[t.OnlyOneBindingAvailable=1]="OnlyOneBindingAvailable"}(P||(P={}));var G=function(){function t(t){this.id=T(),this.container=t}return t.prototype.addPlan=function(t){this.plan=t},t.prototype.setCurrentRequest=function(t){this.currentRequest=t},t}(),L=function(){function t(t,n){this.key=t,this.value=n}return t.prototype.toString=function(){return this.key===o?"named: ".concat(String(this.value).toString()," "):"tagged: { key:".concat(this.key.toString(),", value: ").concat(String(this.value)," }")},t}(),U=function(t,n){this.parentContext=t,this.rootRequest=n};function H(t,n){var e=Object.getPrototypeOf(n.prototype).constructor;if(e!==Object){var i=(0,k.getTargets)(t)(e),r=i.map((function(t){return t.metadata.filter((function(t){return t.key===c}))})),o=[].concat.apply([],r).length,a=i.length-o;return a>0?a:H(t,e)}return 0}var Y=function(){function t(t,n,e,i,r){this.id=T(),this.serviceIdentifier=t,this.parentContext=n,this.parentRequest=e,this.target=r,this.childRequests=[],this.bindings=Array.isArray(i)?i:[i],this.requestScope=null===e?new Map:null}return t.prototype.addChildRequest=function(n,e,i){var r=new t(n,this.parentContext,this,e,i);return this.childRequests.push(r),r},t}();function z(t){return t._bindingDictionary}function $(t,n,e,i,r){var o,a=J(e.container,r.serviceIdentifier);return a.length===P.NoBindingsAvailable&&!0===e.container.options.autoBindInjectable&&"function"==typeof r.serviceIdentifier&&t.getConstructorMetadata(r.serviceIdentifier).compilerGeneratedMetadata&&(e.container.bind(r.serviceIdentifier).toSelf(),a=J(e.container,r.serviceIdentifier)),o=n?a:a.filter((function(t){var n=new Y(t.serviceIdentifier,e,i,t,r);return t.constraint(n)})),function(t,n,e,i,r){switch(n.length){case P.NoBindingsAvailable:if(i.isOptional())return n;var o=O(t),a="No matching bindings found for serviceIdentifier:";throw a+=function(t,n){if(n.isTagged()||n.isNamed()){var e="",i=n.getNamedTag(),r=n.getCustomTags();return null!==i&&(e+=K(i)+"\n"),null!==r&&r.forEach((function(t){e+=K(t)+"\n"}))," ".concat(t,"\n ").concat(t," - ").concat(e)}return" ".concat(t)}(o,i),a+=B(r,o,J),null!==e&&(a+="\n".concat((c=O(e.serviceIdentifier),'Trying to resolve bindings for "'.concat(c,'"')))),new Error(a);case P.OnlyOneBindingAvailable:return n;case P.MultipleBindingsAvailable:default:if(i.isArray())return n;throw o=O(t),a="".concat("Ambiguous match found for serviceIdentifier:"," ").concat(o),a+=B(r,o,J),new Error(a)}var c}(r.serviceIdentifier,o,i,r,e.container),o}function Q(t,n,e,i){var r=[new L(t?d:s,n)];return void 0!==e&&r.push(new L(e,i)),r}function Z(t,n,e,i,r,o){var a,c;if(null===r){a=$(t,n,i,null,o),c=new Y(e,i,null,a,o);var u=new U(i,c);i.addPlan(u)}else a=$(t,n,i,r,o),c=r.addChildRequest(o.serviceIdentifier,a,o);a.forEach((function(n){var e,r=null;if(o.isArray())r=c.addChildRequest(n.serviceIdentifier,n,o);else{if(null!==n.cache)return;r=c}if(n.type===A.Instance&&null!==n.implementationType){var a=function(t,n){return(0,k.getTargets)(t)(n)}(t,n.implementationType);if(!0!==i.container.options.skipBaseClassChecks){var u=H(t,n.implementationType);if(a.length<u){var s=(e=W(n.implementationType),"The number of constructor arguments in the derived class "+"".concat(e," must be >= than the number of constructor arguments of its base class."));throw new Error(s)}}a.forEach((function(n){Z(t,!1,n.serviceIdentifier,i,r,n)}))}}))}function J(t,n){var e=[],i=z(t);return i.hasKey(n)?e=i.get(n):null!==t.parent&&(e=J(t.parent,n)),e}function X(t){return("object"==typeof t&&null!==t||"function"==typeof t)&&"function"==typeof t.then}function tt(t){return!!X(t)||Array.isArray(t)&&t.some(X)}var nt,et=function(t,n){return e=void 0,i=void 0,o=function(){var e,i;return function(t,n){var e,i,r,o={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]},a=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return a.next=c(0),a.throw=c(1),a.return=c(2),"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function c(c){return function(u){return function(c){if(e)throw new TypeError("Generator is already executing.");for(;a&&(a=0,c[0]&&(o=0)),o;)try{if(e=1,i&&(r=2&c[0]?i.return:c[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,c[1])).done)return r;switch(i=0,r&&(c=[2&c[0],r.value]),c[0]){case 0:case 1:r=c;break;case 4:return o.label++,{value:c[1],done:!1};case 5:o.label++,i=c[1],c=[0];continue;case 7:c=o.ops.pop(),o.trys.pop();continue;default:if(!((r=(r=o.trys).length>0&&r[r.length-1])||6!==c[0]&&2!==c[0])){o=0;continue}if(3===c[0]&&(!r||c[1]>r[0]&&c[1]<r[3])){o.label=c[1];break}if(6===c[0]&&o.label<r[1]){o.label=r[1],r=c;break}if(r&&o.label<r[2]){o.label=r[2],o.ops.push(c);break}r[2]&&o.ops.pop(),o.trys.pop();continue}c=n.call(t,o)}catch(t){c=[6,t],i=0}finally{e=r=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}}(this,(function(r){switch(r.label){case 0:return r.trys.push([0,2,,3]),[4,n];case 1:return e=r.sent(),t.cache=e,[3,3];case 2:throw i=r.sent(),t.cache=null,t.activated=!1,i;case 3:return[2]}}))},new((r=void 0)||(r=Promise))((function(t,n){function a(t){try{u(o.next(t))}catch(t){n(t)}}function c(t){try{u(o.throw(t))}catch(t){n(t)}}function u(n){var e;n.done?t(n.value):(e=n.value,e instanceof r?e:new r((function(t){t(e)}))).then(a,c)}u((o=o.apply(e,i||[])).next())}));var e,i,r,o};!function(t){t.DynamicValue="toDynamicValue",t.Factory="toFactory",t.Provider="toProvider"}(nt||(nt={}));var it=function(t){return function(n){return function(){for(var e=[],i=0;i<arguments.length;i++)e[i]=arguments[i];e.forEach((function(e){t.bind(e).toService(n)}))}}},rt=function(){return rt=Object.assign||function(t){for(var n,e=1,i=arguments.length;e<i;e++)for(var r in n=arguments[e])Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r]);return t},rt.apply(this,arguments)},ot=function(t,n,e,i){return new(e||(e=Promise))((function(r,o){function a(t){try{u(i.next(t))}catch(t){o(t)}}function c(t){try{u(i.throw(t))}catch(t){o(t)}}function u(t){var n;t.done?r(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(a,c)}u((i=i.apply(t,n||[])).next())}))},at=function(t,n){var e,i,r,o={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]},a=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return a.next=c(0),a.throw=c(1),a.return=c(2),"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function c(c){return function(u){return function(c){if(e)throw new TypeError("Generator is already executing.");for(;a&&(a=0,c[0]&&(o=0)),o;)try{if(e=1,i&&(r=2&c[0]?i.return:c[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,c[1])).done)return r;switch(i=0,r&&(c=[2&c[0],r.value]),c[0]){case 0:case 1:r=c;break;case 4:return o.label++,{value:c[1],done:!1};case 5:o.label++,i=c[1],c=[0];continue;case 7:c=o.ops.pop(),o.trys.pop();continue;default:if(!((r=(r=o.trys).length>0&&r[r.length-1])||6!==c[0]&&2!==c[0])){o=0;continue}if(3===c[0]&&(!r||c[1]>r[0]&&c[1]<r[3])){o.label=c[1];break}if(6===c[0]&&o.label<r[1]){o.label=r[1],r=c;break}if(r&&o.label<r[2]){o.label=r[2],o.ops.push(c);break}r[2]&&o.ops.pop(),o.trys.pop();continue}c=n.call(t,o)}catch(t){c=[6,t],i=0}finally{e=r=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}};function ct(t){var n,e=new((n=t.constr).bind.apply(n,function(t,n,e){if(e||2===arguments.length)for(var i,r=0,o=n.length;r<o;r++)!i&&r in n||(i||(i=Array.prototype.slice.call(n,0,r)),i[r]=n[r]);return t.concat(i||Array.prototype.slice.call(n))}([void 0],t.constructorInjections,!1)));return t.propertyRequests.forEach((function(n,i){var r=n.target.identifier,o=t.propertyInjections[i];n.target.isOptional()&&void 0===o||(e[r]=o)})),e}function ut(t){return ot(this,void 0,void 0,(function(){var n,e,i,r;return at(this,(function(o){for(n=[],e=0,i=t;e<i.length;e++)r=i[e],Array.isArray(r)?n.push(Promise.all(r)):n.push(r);return[2,Promise.all(n)]}))}))}function st(t,n){var e=function(t,n){var e,i,r,o;if(Reflect.hasMetadata(y,t)){var a=Reflect.getMetadata(y,t);try{return null===(i=(e=n)[a.value])||void 0===i?void 0:i.call(e)}catch(n){if(n instanceof Error)throw new Error((r=t.name,o=n.message,"@postConstruct error in class ".concat(r,": ").concat(o)))}}}(t,n);return X(e)?e.then((function(){return n})):n}var dt=function(t){return function(n){n.parentContext.setCurrentRequest(n);var e=n.bindings,i=n.childRequests,r=n.target&&n.target.isArray(),o=!(n.parentRequest&&n.parentRequest.target&&n.target&&n.parentRequest.target.matchesArray(n.target.serviceIdentifier));if(r&&o)return i.map((function(n){return dt(t)(n)}));if(!n.target.isOptional()||0!==e.length){var a=e[0];return pt(t,n,a)}}},lt=function(t,n){var e=function(t){switch(t.type){case A.Factory:return{factory:t.factory,factoryType:nt.Factory};case A.Provider:return{factory:t.provider,factoryType:nt.Provider};case A.DynamicValue:return{factory:t.dynamicValue,factoryType:nt.DynamicValue};default:throw new Error("Unexpected factory type ".concat(t.type))}}(t);return function(){try{return e.factory.bind(t)(n)}catch(t){if(F(t))throw new Error((i=e.factoryType,r=n.currentRequest.serviceIdentifier.toString(),"It looks like there is a circular dependency in one of the '".concat(i,"' bindings. Please investigate bindings with ")+"service identifier '".concat(r,"'.")));throw t}var i,r}()},ft=function(t,n,e){var i,r=n.childRequests;switch(function(t){var n=null;switch(t.type){case A.ConstantValue:case A.Function:n=t.cache;break;case A.Constructor:case A.Instance:n=t.implementationType;break;case A.DynamicValue:n=t.dynamicValue;break;case A.Provider:n=t.provider;break;case A.Factory:n=t.factory}if(null===n){var e=O(t.serviceIdentifier);throw new Error("".concat("Invalid binding type:"," ").concat(e))}}(e),e.type){case A.ConstantValue:case A.Function:i=e.cache;break;case A.Constructor:i=e.implementationType;break;case A.Instance:i=function(t,n,e,i){!function(t,n){t.scope!==m.Singleton&&function(t,n){var e,i,r="Class cannot be instantiated in ".concat(t.scope===m.Request?"request":"transient"," scope.");if("function"==typeof t.onDeactivation)throw new Error(R(n.name,r));if(Reflect.hasMetadata(v,n))throw new Error((e=n.name,i=r,"@preDestroy error in class ".concat(e,": ").concat(i)))}(t,n)}(t,n);var r=function(t,n,e){var i;if(n.length>0){var r=function(t,n){return t.reduce((function(t,e){var i=n(e);return e.target.type===S.ConstructorArgument?t.constructorInjections.push(i):(t.propertyRequests.push(e),t.propertyInjections.push(i)),t.isAsync||(t.isAsync=tt(i)),t}),{constructorInjections:[],isAsync:!1,propertyInjections:[],propertyRequests:[]})}(n,e),o=rt(rt({},r),{constr:t});i=r.isAsync?function(t){return ot(this,void 0,void 0,(function(){var n,e;return at(this,(function(i){switch(i.label){case 0:return[4,ut(t.constructorInjections)];case 1:return n=i.sent(),[4,ut(t.propertyInjections)];case 2:return e=i.sent(),[2,ct(rt(rt({},t),{constructorInjections:n,propertyInjections:e}))]}}))}))}(o):ct(o)}else i=new t;return i}(n,e,i);return X(r)?r.then((function(t){return st(n,t)})):st(n,r)}(e,e.implementationType,r,dt(t));break;default:i=lt(e,n.parentContext)}return i},ht=function(t,n,e){var i=function(t,n){return n.scope===m.Singleton&&n.activated?n.cache:n.scope===m.Request&&t.has(n.id)?t.get(n.id):null}(t,n);return null!==i||function(t,n,e){n.scope===m.Singleton&&function(t,n){t.cache=n,t.activated=!0,X(n)&&et(t,n)}(n,e),n.scope===m.Request&&function(t,n,e){t.has(n.id)||t.set(n.id,e)}(t,n,e)}(t,n,i=e()),i},pt=function(t,n,e){return ht(t,e,(function(){var i=ft(t,n,e);return X(i)?i.then((function(t){return yt(n,e,t)})):yt(n,e,i)}))};function yt(t,n,e){var i,r=vt(t.parentContext,n,e),o=_t(t.parentContext.container),a=o.next();do{i=a.value;var c=t.parentContext,u=t.serviceIdentifier,s=wt(i,u);r=X(r)?bt(s,c,r):gt(s,c,r),a=o.next()}while(!0!==a.done&&!z(i).hasKey(t.serviceIdentifier));return r}var vt=function(t,n,e){return"function"==typeof n.onActivation?n.onActivation(t,e):e},gt=function(t,n,e){for(var i=t.next();!0!==i.done;){if(X(e=i.value(n,e)))return bt(t,n,e);i=t.next()}return e},bt=function(t,n,e){return i=void 0,r=void 0,a=function(){var i,r;return function(t,n){var e,i,r,o={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]},a=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return a.next=c(0),a.throw=c(1),a.return=c(2),"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function c(c){return function(u){return function(c){if(e)throw new TypeError("Generator is already executing.");for(;a&&(a=0,c[0]&&(o=0)),o;)try{if(e=1,i&&(r=2&c[0]?i.return:c[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,c[1])).done)return r;switch(i=0,r&&(c=[2&c[0],r.value]),c[0]){case 0:case 1:r=c;break;case 4:return o.label++,{value:c[1],done:!1};case 5:o.label++,i=c[1],c=[0];continue;case 7:c=o.ops.pop(),o.trys.pop();continue;default:if(!((r=(r=o.trys).length>0&&r[r.length-1])||6!==c[0]&&2!==c[0])){o=0;continue}if(3===c[0]&&(!r||c[1]>r[0]&&c[1]<r[3])){o.label=c[1];break}if(6===c[0]&&o.label<r[1]){o.label=r[1],r=c;break}if(r&&o.label<r[2]){o.label=r[2],o.ops.push(c);break}r[2]&&o.ops.pop(),o.trys.pop();continue}c=n.call(t,o)}catch(t){c=[6,t],i=0}finally{e=r=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}}(this,(function(o){switch(o.label){case 0:return[4,e];case 1:i=o.sent(),r=t.next(),o.label=2;case 2:return!0===r.done?[3,4]:[4,r.value(n,i)];case 3:return i=o.sent(),r=t.next(),[3,2];case 4:return[2,i]}}))},new((o=void 0)||(o=Promise))((function(t,n){function e(t){try{u(a.next(t))}catch(t){n(t)}}function c(t){try{u(a.throw(t))}catch(t){n(t)}}function u(n){var i;n.done?t(n.value):(i=n.value,i instanceof o?i:new o((function(t){t(i)}))).then(e,c)}u((a=a.apply(i,r||[])).next())}));var i,r,o,a},wt=function(t,n){var e=t._activations;return e.hasKey(n)?e.get(n).values():[].values()},_t=function(t){for(var n=[t],e=t.parent;null!==e;)n.push(e),e=e.parent;return{next:function(){var t=n.pop();return void 0!==t?{done:!1,value:t}:{done:!0,value:void 0}}}},mt=function(t,n){var e=t.parentRequest;return null!==e&&(!!n(e)||mt(e,n))},At=function(t){return function(n){var e=function(e){return null!==e&&null!==e.target&&e.target.matchesTag(t)(n)};return e.metaData=new L(t,n),e}},St=At(o),It=function(t){return function(n){var e=null;if(null!==n){if(e=n.bindings[0],"string"==typeof t)return e.serviceIdentifier===t;var i=n.bindings[0].implementationType;return t===i}return!1}},Tt=function(){function t(t){this._binding=t}return t.prototype.when=function(t){return this._binding.constraint=t,new Dt(this._binding)},t.prototype.whenTargetNamed=function(t){return this._binding.constraint=St(t),new Dt(this._binding)},t.prototype.whenTargetIsDefault=function(){return this._binding.constraint=function(t){return null!==t&&null!==t.target&&!t.target.isNamed()&&!t.target.isTagged()},new Dt(this._binding)},t.prototype.whenTargetTagged=function(t,n){return this._binding.constraint=At(t)(n),new Dt(this._binding)},t.prototype.whenInjectedInto=function(t){return this._binding.constraint=function(n){return null!==n&&It(t)(n.parentRequest)},new Dt(this._binding)},t.prototype.whenParentNamed=function(t){return this._binding.constraint=function(n){return null!==n&&St(t)(n.parentRequest)},new Dt(this._binding)},t.prototype.whenParentTagged=function(t,n){return this._binding.constraint=function(e){return null!==e&&At(t)(n)(e.parentRequest)},new Dt(this._binding)},t.prototype.whenAnyAncestorIs=function(t){return this._binding.constraint=function(n){return null!==n&&mt(n,It(t))},new Dt(this._binding)},t.prototype.whenNoAncestorIs=function(t){return this._binding.constraint=function(n){return null!==n&&!mt(n,It(t))},new Dt(this._binding)},t.prototype.whenAnyAncestorNamed=function(t){return this._binding.constraint=function(n){return null!==n&&mt(n,St(t))},new Dt(this._binding)},t.prototype.whenNoAncestorNamed=function(t){return this._binding.constraint=function(n){return null!==n&&!mt(n,St(t))},new Dt(this._binding)},t.prototype.whenAnyAncestorTagged=function(t,n){return this._binding.constraint=function(e){return null!==e&&mt(e,At(t)(n))},new Dt(this._binding)},t.prototype.whenNoAncestorTagged=function(t,n){return this._binding.constraint=function(e){return null!==e&&!mt(e,At(t)(n))},new Dt(this._binding)},t.prototype.whenAnyAncestorMatches=function(t){return this._binding.constraint=function(n){return null!==n&&mt(n,t)},new Dt(this._binding)},t.prototype.whenNoAncestorMatches=function(t){return this._binding.constraint=function(n){return null!==n&&!mt(n,t)},new Dt(this._binding)},t}(),Dt=function(){function t(t){this._binding=t}return t.prototype.onActivation=function(t){return this._binding.onActivation=t,new Tt(this._binding)},t.prototype.onDeactivation=function(t){return this._binding.onDeactivation=t,new Tt(this._binding)},t}(),Ct=function(){function t(t){this._binding=t,this._bindingWhenSyntax=new Tt(this._binding),this._bindingOnSyntax=new Dt(this._binding)}return t.prototype.when=function(t){return this._bindingWhenSyntax.when(t)},t.prototype.whenTargetNamed=function(t){return this._bindingWhenSyntax.whenTargetNamed(t)},t.prototype.whenTargetIsDefault=function(){return this._bindingWhenSyntax.whenTargetIsDefault()},t.prototype.whenTargetTagged=function(t,n){return this._bindingWhenSyntax.whenTargetTagged(t,n)},t.prototype.whenInjectedInto=function(t){return this._bindingWhenSyntax.whenInjectedInto(t)},t.prototype.whenParentNamed=function(t){return this._bindingWhenSyntax.whenParentNamed(t)},t.prototype.whenParentTagged=function(t,n){return this._bindingWhenSyntax.whenParentTagged(t,n)},t.prototype.whenAnyAncestorIs=function(t){return this._bindingWhenSyntax.whenAnyAncestorIs(t)},t.prototype.whenNoAncestorIs=function(t){return this._bindingWhenSyntax.whenNoAncestorIs(t)},t.prototype.whenAnyAncestorNamed=function(t){return this._bindingWhenSyntax.whenAnyAncestorNamed(t)},t.prototype.whenAnyAncestorTagged=function(t,n){return this._bindingWhenSyntax.whenAnyAncestorTagged(t,n)},t.prototype.whenNoAncestorNamed=function(t){return this._bindingWhenSyntax.whenNoAncestorNamed(t)},t.prototype.whenNoAncestorTagged=function(t,n){return this._bindingWhenSyntax.whenNoAncestorTagged(t,n)},t.prototype.whenAnyAncestorMatches=function(t){return this._bindingWhenSyntax.whenAnyAncestorMatches(t)},t.prototype.whenNoAncestorMatches=function(t){return this._bindingWhenSyntax.whenNoAncestorMatches(t)},t.prototype.onActivation=function(t){return this._bindingOnSyntax.onActivation(t)},t.prototype.onDeactivation=function(t){return this._bindingOnSyntax.onDeactivation(t)},t}(),Et=function(){function t(t){this._binding=t}return t.prototype.inRequestScope=function(){return this._binding.scope=m.Request,new Ct(this._binding)},t.prototype.inSingletonScope=function(){return this._binding.scope=m.Singleton,new Ct(this._binding)},t.prototype.inTransientScope=function(){return this._binding.scope=m.Transient,new Ct(this._binding)},t}(),xt=function(){function t(t){this._binding=t,this._bindingWhenSyntax=new Tt(this._binding),this._bindingOnSyntax=new Dt(this._binding),this._bindingInSyntax=new Et(t)}return t.prototype.inRequestScope=function(){return this._bindingInSyntax.inRequestScope()},t.prototype.inSingletonScope=function(){return this._bindingInSyntax.inSingletonScope()},t.prototype.inTransientScope=function(){return this._bindingInSyntax.inTransientScope()},t.prototype.when=function(t){return this._bindingWhenSyntax.when(t)},t.prototype.whenTargetNamed=function(t){return this._bindingWhenSyntax.whenTargetNamed(t)},t.prototype.whenTargetIsDefault=function(){return this._bindingWhenSyntax.whenTargetIsDefault()},t.prototype.whenTargetTagged=function(t,n){return this._bindingWhenSyntax.whenTargetTagged(t,n)},t.prototype.whenInjectedInto=function(t){return this._bindingWhenSyntax.whenInjectedInto(t)},t.prototype.whenParentNamed=function(t){return this._bindingWhenSyntax.whenParentNamed(t)},t.prototype.whenParentTagged=function(t,n){return this._bindingWhenSyntax.whenParentTagged(t,n)},t.prototype.whenAnyAncestorIs=function(t){return this._bindingWhenSyntax.whenAnyAncestorIs(t)},t.prototype.whenNoAncestorIs=function(t){return this._bindingWhenSyntax.whenNoAncestorIs(t)},t.prototype.whenAnyAncestorNamed=function(t){return this._bindingWhenSyntax.whenAnyAncestorNamed(t)},t.prototype.whenAnyAncestorTagged=function(t,n){return this._bindingWhenSyntax.whenAnyAncestorTagged(t,n)},t.prototype.whenNoAncestorNamed=function(t){return this._bindingWhenSyntax.whenNoAncestorNamed(t)},t.prototype.whenNoAncestorTagged=function(t,n){return this._bindingWhenSyntax.whenNoAncestorTagged(t,n)},t.prototype.whenAnyAncestorMatches=function(t){return this._bindingWhenSyntax.whenAnyAncestorMatches(t)},t.prototype.whenNoAncestorMatches=function(t){return this._bindingWhenSyntax.whenNoAncestorMatches(t)},t.prototype.onActivation=function(t){return this._bindingOnSyntax.onActivation(t)},t.prototype.onDeactivation=function(t){return this._bindingOnSyntax.onDeactivation(t)},t}(),Nt=function(){function t(t){this._binding=t}return t.prototype.to=function(t){return this._binding.type=A.Instance,this._binding.implementationType=t,new xt(this._binding)},t.prototype.toSelf=function(){if("function"!=typeof this._binding.serviceIdentifier)throw new Error("The toSelf function can only be applied when a constructor is used as service identifier");var t=this._binding.serviceIdentifier;return this.to(t)},t.prototype.toConstantValue=function(t){return this._binding.type=A.ConstantValue,this._binding.cache=t,this._binding.dynamicValue=null,this._binding.implementationType=null,this._binding.scope=m.Singleton,new Ct(this._binding)},t.prototype.toDynamicValue=function(t){return this._binding.type=A.DynamicValue,this._binding.cache=null,this._binding.dynamicValue=t,this._binding.implementationType=null,new xt(this._binding)},t.prototype.toConstructor=function(t){return this._binding.type=A.Constructor,this._binding.implementationType=t,this._binding.scope=m.Singleton,new Ct(this._binding)},t.prototype.toFactory=function(t){return this._binding.type=A.Factory,this._binding.factory=t,this._binding.scope=m.Singleton,new Ct(this._binding)},t.prototype.toFunction=function(t){if("function"!=typeof t)throw new Error("Value provided to function binding must be a function!");var n=this.toConstantValue(t);return this._binding.type=A.Function,this._binding.scope=m.Singleton,n},t.prototype.toAutoFactory=function(t){return this._binding.type=A.Factory,this._binding.factory=function(n){return function(){return n.container.get(t)}},this._binding.scope=m.Singleton,new Ct(this._binding)},t.prototype.toAutoNamedFactory=function(t){return this._binding.type=A.Factory,this._binding.factory=function(n){return function(e){return n.container.getNamed(t,e)}},new Ct(this._binding)},t.prototype.toProvider=function(t){return this._binding.type=A.Provider,this._binding.provider=t,this._binding.scope=m.Singleton,new Ct(this._binding)},t.prototype.toService=function(t){this.toDynamicValue((function(n){return n.container.get(t)}))},t}(),Mt=function(){function t(){}return t.of=function(n,e,i,r,o){var a=new t;return a.bindings=n,a.middleware=e,a.deactivations=r,a.activations=i,a.moduleActivationStore=o,a},t}(),Rt=function(){function t(){this._map=new Map}return t.prototype.getMap=function(){return this._map},t.prototype.add=function(t,n){if(this._checkNonNulish(t),null==n)throw new Error(x);var e=this._map.get(t);void 0!==e?e.push(n):this._map.set(t,[n])},t.prototype.get=function(t){this._checkNonNulish(t);var n=this._map.get(t);if(void 0!==n)return n;throw new Error(N)},t.prototype.remove=function(t){if(this._checkNonNulish(t),!this._map.delete(t))throw new Error(N)},t.prototype.removeIntersection=function(t){var n=this;this.traverse((function(e,i){var r=t.hasKey(e)?t.get(e):void 0;if(void 0!==r){var o=i.filter((function(t){return!r.some((function(n){return t===n}))}));n._setValue(e,o)}}))},t.prototype.removeByCondition=function(t){var n=this,e=[];return this._map.forEach((function(i,r){for(var o=[],a=0,c=i;a<c.length;a++){var u=c[a];t(u)?e.push(u):o.push(u)}n._setValue(r,o)})),e},t.prototype.hasKey=function(t){return this._checkNonNulish(t),this._map.has(t)},t.prototype.clone=function(){var n=new t;return this._map.forEach((function(t,e){t.forEach((function(t){var i;n.add(e,"object"==typeof(i=t)&&null!==i&&"clone"in i&&"function"==typeof i.clone?t.clone():t)}))})),n},t.prototype.traverse=function(t){this._map.forEach((function(n,e){t(e,n)}))},t.prototype._checkNonNulish=function(t){if(null==t)throw new Error(x)},t.prototype._setValue=function(t,n){n.length>0?this._map.set(t,n):this._map.delete(t)},t}(),jt=function(){function t(){this._map=new Map}return t.prototype.remove=function(t){var n=this._map.get(t);return void 0===n?this._getEmptyHandlersStore():(this._map.delete(t),n)},t.prototype.addDeactivation=function(t,n,e){this._getModuleActivationHandlers(t).onDeactivations.add(n,e)},t.prototype.addActivation=function(t,n,e){this._getModuleActivationHandlers(t).onActivations.add(n,e)},t.prototype.clone=function(){var n=new t;return this._map.forEach((function(t,e){n._map.set(e,{onActivations:t.onActivations.clone(),onDeactivations:t.onDeactivations.clone()})})),n},t.prototype._getModuleActivationHandlers=function(t){var n=this._map.get(t);return void 0===n&&(n=this._getEmptyHandlersStore(),this._map.set(t,n)),n},t.prototype._getEmptyHandlersStore=function(){return{onActivations:new Rt,onDeactivations:new Rt}},t}(),kt=function(){return kt=Object.assign||function(t){for(var n,e=1,i=arguments.length;e<i;e++)for(var r in n=arguments[e])Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r]);return t},kt.apply(this,arguments)},Pt=function(t,n,e,i){return new(e||(e=Promise))((function(r,o){function a(t){try{u(i.next(t))}catch(t){o(t)}}function c(t){try{u(i.throw(t))}catch(t){o(t)}}function u(t){var n;t.done?r(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(a,c)}u((i=i.apply(t,n||[])).next())}))},Ft=function(t,n){var e,i,r,o={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]},a=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return a.next=c(0),a.throw=c(1),a.return=c(2),"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function c(c){return function(u){return function(c){if(e)throw new TypeError("Generator is already executing.");for(;a&&(a=0,c[0]&&(o=0)),o;)try{if(e=1,i&&(r=2&c[0]?i.return:c[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,c[1])).done)return r;switch(i=0,r&&(c=[2&c[0],r.value]),c[0]){case 0:case 1:r=c;break;case 4:return o.label++,{value:c[1],done:!1};case 5:o.label++,i=c[1],c=[0];continue;case 7:c=o.ops.pop(),o.trys.pop();continue;default:if(!((r=(r=o.trys).length>0&&r[r.length-1])||6!==c[0]&&2!==c[0])){o=0;continue}if(3===c[0]&&(!r||c[1]>r[0]&&c[1]<r[3])){o.label=c[1];break}if(6===c[0]&&o.label<r[1]){o.label=r[1],r=c;break}if(r&&o.label<r[2]){o.label=r[2],o.ops.push(c);break}r[2]&&o.ops.pop(),o.trys.pop();continue}c=n.call(t,o)}catch(t){c=[6,t],i=0}finally{e=r=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}},Ot=function(){function t(t){var n=t||{};if("object"!=typeof n)throw new Error("Invalid Container constructor argument. Container options must be an object.");if(void 0===n.defaultScope)n.defaultScope=m.Transient;else if(n.defaultScope!==m.Singleton&&n.defaultScope!==m.Transient&&n.defaultScope!==m.Request)throw new Error('Invalid Container option. Default scope must be a string ("singleton" or "transient").');if(void 0===n.autoBindInjectable)n.autoBindInjectable=!1;else if("boolean"!=typeof n.autoBindInjectable)throw new Error("Invalid Container option. Auto bind injectable must be a boolean");if(void 0===n.skipBaseClassChecks)n.skipBaseClassChecks=!1;else if("boolean"!=typeof n.skipBaseClassChecks)throw new Error("Invalid Container option. Skip base check must be a boolean");this.options={autoBindInjectable:n.autoBindInjectable,defaultScope:n.defaultScope,skipBaseClassChecks:n.skipBaseClassChecks},this.id=T(),this._bindingDictionary=new Rt,this._snapshots=[],this._middleware=null,this._activations=new Rt,this._deactivations=new Rt,this.parent=null,this._metadataReader=new j,this._moduleActivationStore=new jt}return t.merge=function(n,e){for(var i=[],r=2;r<arguments.length;r++)i[r-2]=arguments[r];var o=new t,a=function(t,n,e){if(e||2===arguments.length)for(var i,r=0,o=n.length;r<o;r++)!i&&r in n||(i||(i=Array.prototype.slice.call(n,0,r)),i[r]=n[r]);return t.concat(i||Array.prototype.slice.call(n))}([n,e],i,!0).map((function(t){return z(t)})),c=z(o);return a.forEach((function(t){var n;n=c,t.traverse((function(t,e){e.forEach((function(t){n.add(t.serviceIdentifier,t.clone())}))}))})),o},t.prototype.load=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];for(var e=this._getContainerModuleHelpersFactory(),i=0,r=t;i<r.length;i++){var o=r[i],a=e(o.id);o.registry(a.bindFunction,a.unbindFunction,a.isboundFunction,a.rebindFunction,a.unbindAsyncFunction,a.onActivationFunction,a.onDeactivationFunction)}},t.prototype.loadAsync=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return Pt(this,void 0,void 0,(function(){var n,e,i,r,o;return Ft(this,(function(a){switch(a.label){case 0:n=this._getContainerModuleHelpersFactory(),e=0,i=t,a.label=1;case 1:return e<i.length?(r=i[e],o=n(r.id),[4,r.registry(o.bindFunction,o.unbindFunction,o.isboundFunction,o.rebindFunction,o.unbindAsyncFunction,o.onActivationFunction,o.onDeactivationFunction)]):[3,4];case 2:a.sent(),a.label=3;case 3:return e++,[3,1];case 4:return[2]}}))}))},t.prototype.unload=function(){for(var t=this,n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];n.forEach((function(n){var e=t._removeModuleBindings(n.id);t._deactivateSingletons(e),t._removeModuleHandlers(n.id)}))},t.prototype.unloadAsync=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return Pt(this,void 0,void 0,(function(){var n,e,i,r;return Ft(this,(function(o){switch(o.label){case 0:n=0,e=t,o.label=1;case 1:return n<e.length?(i=e[n],r=this._removeModuleBindings(i.id),[4,this._deactivateSingletonsAsync(r)]):[3,4];case 2:o.sent(),this._removeModuleHandlers(i.id),o.label=3;case 3:return n++,[3,1];case 4:return[2]}}))}))},t.prototype.bind=function(t){var n=this.options.defaultScope||m.Transient,e=new D(t,n);return this._bindingDictionary.add(t,e),new Nt(e)},t.prototype.rebind=function(t){return this.unbind(t),this.bind(t)},t.prototype.rebindAsync=function(t){return Pt(this,void 0,void 0,(function(){return Ft(this,(function(n){switch(n.label){case 0:return[4,this.unbindAsync(t)];case 1:return n.sent(),[2,this.bind(t)]}}))}))},t.prototype.unbind=function(t){if(this._bindingDictionary.hasKey(t)){var n=this._bindingDictionary.get(t);this._deactivateSingletons(n)}this._removeServiceFromDictionary(t)},t.prototype.unbindAsync=function(t){return Pt(this,void 0,void 0,(function(){var n;return Ft(this,(function(e){switch(e.label){case 0:return this._bindingDictionary.hasKey(t)?(n=this._bindingDictionary.get(t),[4,this._deactivateSingletonsAsync(n)]):[3,2];case 1:e.sent(),e.label=2;case 2:return this._removeServiceFromDictionary(t),[2]}}))}))},t.prototype.unbindAll=function(){var t=this;this._bindingDictionary.traverse((function(n,e){t._deactivateSingletons(e)})),this._bindingDictionary=new Rt},t.prototype.unbindAllAsync=function(){return Pt(this,void 0,void 0,(function(){var t,n=this;return Ft(this,(function(e){switch(e.label){case 0:return t=[],this._bindingDictionary.traverse((function(e,i){t.push(n._deactivateSingletonsAsync(i))})),[4,Promise.all(t)];case 1:return e.sent(),this._bindingDictionary=new Rt,[2]}}))}))},t.prototype.onActivation=function(t,n){this._activations.add(t,n)},t.prototype.onDeactivation=function(t,n){this._deactivations.add(t,n)},t.prototype.isBound=function(t){var n=this._bindingDictionary.hasKey(t);return!n&&this.parent&&(n=this.parent.isBound(t)),n},t.prototype.isCurrentBound=function(t){return this._bindingDictionary.hasKey(t)},t.prototype.isBoundNamed=function(t,n){return this.isBoundTagged(t,o,n)},t.prototype.isBoundTagged=function(t,n,e){var i=!1;if(this._bindingDictionary.hasKey(t)){var r=this._bindingDictionary.get(t),o=function(t,n,e,i){var r=Q(!1,n,e,i),o=(0,k.getClassElementMetadataFromLegacyMetadata)(r);if(o.kind===k.ClassElementMetadataKind.unmanaged)throw new Error("Unexpected metadata when creating target");var a=new k.LegacyTargetImpl("",o,"Variable"),c=new G(t);return new Y(n,c,null,[],a)}(this,t,n,e);i=r.some((function(t){return t.constraint(o)}))}return!i&&this.parent&&(i=this.parent.isBoundTagged(t,n,e)),i},t.prototype.snapshot=function(){this._snapshots.push(Mt.of(this._bindingDictionary.clone(),this._middleware,this._activations.clone(),this._deactivations.clone(),this._moduleActivationStore.clone()))},t.prototype.restore=function(){var t=this._snapshots.pop();if(void 0===t)throw new Error("No snapshot available to restore.");this._bindingDictionary=t.bindings,this._activations=t.activations,this._deactivations=t.deactivations,this._middleware=t.middleware,this._moduleActivationStore=t.moduleActivationStore},t.prototype.createChild=function(n){var e=new t(n||this.options);return e.parent=this,e},t.prototype.applyMiddleware=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=this._middleware?this._middleware:this._planAndResolve();this._middleware=t.reduce((function(t,n){return n(t)}),e)},t.prototype.applyCustomMetadataReader=function(t){this._metadataReader=t},t.prototype.get=function(t){var n=this._getNotAllArgs(t,!1);return this._getButThrowIfAsync(n)},t.prototype.getAsync=function(t){return Pt(this,void 0,void 0,(function(){var n;return Ft(this,(function(e){return n=this._getNotAllArgs(t,!1),[2,this._get(n)]}))}))},t.prototype.getTagged=function(t,n,e){var i=this._getNotAllArgs(t,!1,n,e);return this._getButThrowIfAsync(i)},t.prototype.getTaggedAsync=function(t,n,e){return Pt(this,void 0,void 0,(function(){var i;return Ft(this,(function(r){return i=this._getNotAllArgs(t,!1,n,e),[2,this._get(i)]}))}))},t.prototype.getNamed=function(t,n){return this.getTagged(t,o,n)},t.prototype.getNamedAsync=function(t,n){return Pt(this,void 0,void 0,(function(){return Ft(this,(function(e){return[2,this.getTaggedAsync(t,o,n)]}))}))},t.prototype.getAll=function(t){var n=this._getAllArgs(t);return this._getButThrowIfAsync(n)},t.prototype.getAllAsync=function(t){return Pt(this,void 0,void 0,(function(){var n;return Ft(this,(function(e){return n=this._getAllArgs(t),[2,this._getAll(n)]}))}))},t.prototype.getAllTagged=function(t,n,e){var i=this._getNotAllArgs(t,!0,n,e);return this._getButThrowIfAsync(i)},t.prototype.getAllTaggedAsync=function(t,n,e){return Pt(this,void 0,void 0,(function(){var i;return Ft(this,(function(r){return i=this._getNotAllArgs(t,!0,n,e),[2,this._getAll(i)]}))}))},t.prototype.getAllNamed=function(t,n){return this.getAllTagged(t,o,n)},t.prototype.getAllNamedAsync=function(t,n){return Pt(this,void 0,void 0,(function(){return Ft(this,(function(e){return[2,this.getAllTaggedAsync(t,o,n)]}))}))},t.prototype.resolve=function(t){var n=this.isBound(t);n||this.bind(t).toSelf();var e=this.get(t);return n||this.unbind(t),e},t.prototype._preDestroy=function(t,n){var e,i;if(void 0!==t&&Reflect.hasMetadata(v,t))return null===(i=(e=n)[Reflect.getMetadata(v,t).value])||void 0===i?void 0:i.call(e)},t.prototype._removeModuleHandlers=function(t){var n=this._moduleActivationStore.remove(t);this._activations.removeIntersection(n.onActivations),this._deactivations.removeIntersection(n.onDeactivations)},t.prototype._removeModuleBindings=function(t){return this._bindingDictionary.removeByCondition((function(n){return n.moduleId===t}))},t.prototype._deactivate=function(t,n){var e=this,i=null==n?void 0:Object.getPrototypeOf(n).constructor;try{if(this._deactivations.hasKey(t.serviceIdentifier)){var r=this._deactivateContainer(n,this._deactivations.get(t.serviceIdentifier).values());if(X(r))return this._handleDeactivationError(r.then((function(){return Pt(e,void 0,void 0,(function(){return Ft(this,(function(e){return[2,this._propagateContainerDeactivationThenBindingAndPreDestroyAsync(t,n,i)]}))}))})),t.serviceIdentifier)}var o=this._propagateContainerDeactivationThenBindingAndPreDestroy(t,n,i);if(X(o))return this._handleDeactivationError(o,t.serviceIdentifier)}catch(n){if(n instanceof Error)throw new Error(R(O(t.serviceIdentifier),n.message))}},t.prototype._handleDeactivationError=function(t,n){return Pt(this,void 0,void 0,(function(){var e;return Ft(this,(function(i){switch(i.label){case 0:return i.trys.push([0,2,,3]),[4,t];case 1:return i.sent(),[3,3];case 2:if((e=i.sent())instanceof Error)throw new Error(R(O(n),e.message));return[3,3];case 3:return[2]}}))}))},t.prototype._deactivateContainer=function(t,n){for(var e=this,i=n.next();"function"==typeof i.value;){var r=i.value(t);if(X(r))return r.then((function(){return Pt(e,void 0,void 0,(function(){return Ft(this,(function(e){return[2,this._deactivateContainerAsync(t,n)]}))}))}));i=n.next()}},t.prototype._deactivateContainerAsync=function(t,n){return Pt(this,void 0,void 0,(function(){var e;return Ft(this,(function(i){switch(i.label){case 0:e=n.next(),i.label=1;case 1:return"function"!=typeof e.value?[3,3]:[4,e.value(t)];case 2:return i.sent(),e=n.next(),[3,1];case 3:return[2]}}))}))},t.prototype._getContainerModuleHelpersFactory=function(){var t=this,n=function(t,n){t._binding.moduleId=n},e=function(e){return function(i){var r=t.rebind(i);return n(r,e),r}},i=function(n){return function(e,i){t._moduleActivationStore.addActivation(n,e,i),t.onActivation(e,i)}},r=function(n){return function(e,i){t._moduleActivationStore.addDeactivation(n,e,i),t.onDeactivation(e,i)}};return function(o){return{bindFunction:(a=o,function(e){var i=t.bind(e);return n(i,a),i}),isboundFunction:function(n){return t.isBound(n)},onActivationFunction:i(o),onDeactivationFunction:r(o),rebindFunction:e(o),unbindAsyncFunction:function(n){return Pt(t,void 0,void 0,(function(){return Ft(this,(function(t){return[2,this.unbindAsync(n)]}))}))},unbindFunction:function(n){t.unbind(n)}};var a}},t.prototype._getAll=function(t){return Pt(this,void 0,void 0,(function(){return Ft(this,(function(n){return[2,Promise.all(this._get(t))]}))}))},t.prototype._get=function(t){var n=kt(kt({},t),{contextInterceptor:function(t){return t},targetType:S.Variable});if(this._middleware){var e=this._middleware(n);if(null==e)throw new Error("Invalid return type in middleware. Middleware must return!");return e}return this._planAndResolve()(n)},t.prototype._getButThrowIfAsync=function(t){var n,e=this._get(t);if(tt(e))throw new Error((n=t.serviceIdentifier,"You are attempting to construct ".concat(function(t){return"function"==typeof t?"[function/class ".concat(t.name||"<anonymous>","]"):"symbol"==typeof t?t.toString():"'".concat(t,"'")}(n)," in a synchronous way ")+"but it has asynchronous dependencies."));return e},t.prototype._getAllArgs=function(t){return{avoidConstraints:!0,isMultiInject:!0,serviceIdentifier:t}},t.prototype._getNotAllArgs=function(t,n,e,i){return{avoidConstraints:!1,isMultiInject:n,key:e,serviceIdentifier:t,value:i}},t.prototype._planAndResolve=function(){var t=this;return function(n){var e=function(t,n,e,i,r,o,a,c){void 0===c&&(c=!1);var u=new G(n),s=function(t,n,e,i,r,o){var a=Q(t,e,r,o),c=(0,k.getClassElementMetadataFromLegacyMetadata)(a);if(c.kind===k.ClassElementMetadataKind.unmanaged)throw new Error("Unexpected metadata when creating target");return new k.LegacyTargetImpl("",c,n)}(e,i,r,0,o,a);try{return Z(t,c,r,u,null,s),u}catch(t){throw F(t)&&V(u.plan.rootRequest),t}}(t._metadataReader,t,n.isMultiInject,n.targetType,n.serviceIdentifier,n.key,n.value,n.avoidConstraints);return function(t){return dt(t.plan.rootRequest.requestScope)(t.plan.rootRequest)}(e=n.contextInterceptor(e))}},t.prototype._deactivateIfSingleton=function(t){var n=this;if(t.activated)return X(t.cache)?t.cache.then((function(e){return n._deactivate(t,e)})):this._deactivate(t,t.cache)},t.prototype._deactivateSingletons=function(t){for(var n=0,e=t;n<e.length;n++){var i=e[n];if(X(this._deactivateIfSingleton(i)))throw new Error("Attempting to unbind dependency with asynchronous destruction (@preDestroy or onDeactivation)")}},t.prototype._deactivateSingletonsAsync=function(t){return Pt(this,void 0,void 0,(function(){var n=this;return Ft(this,(function(e){switch(e.label){case 0:return[4,Promise.all(t.map((function(t){return Pt(n,void 0,void 0,(function(){return Ft(this,(function(n){return[2,this._deactivateIfSingleton(t)]}))}))})))];case 1:return e.sent(),[2]}}))}))},t.prototype._propagateContainerDeactivationThenBindingAndPreDestroy=function(t,n,e){return this.parent?this._deactivate.bind(this.parent)(t,n):this._bindingDeactivationAndPreDestroy(t,n,e)},t.prototype._propagateContainerDeactivationThenBindingAndPreDestroyAsync=function(t,n,e){return Pt(this,void 0,void 0,(function(){return Ft(this,(function(i){switch(i.label){case 0:return this.parent?[4,this._deactivate.bind(this.parent)(t,n)]:[3,2];case 1:return i.sent(),[3,4];case 2:return[4,this._bindingDeactivationAndPreDestroyAsync(t,n,e)];case 3:i.sent(),i.label=4;case 4:return[2]}}))}))},t.prototype._removeServiceFromDictionary=function(t){try{this._bindingDictionary.remove(t)}catch(n){throw new Error("".concat("Could not unbind serviceIdentifier:"," ").concat(O(t)))}},t.prototype._bindingDeactivationAndPreDestroy=function(t,n,e){var i=this;if("function"==typeof t.onDeactivation){var r=t.onDeactivation(n);if(X(r))return r.then((function(){return i._preDestroy(e,n)}))}return this._preDestroy(e,n)},t.prototype._bindingDeactivationAndPreDestroyAsync=function(t,n,e){return Pt(this,void 0,void 0,(function(){return Ft(this,(function(i){switch(i.label){case 0:return"function"!=typeof t.onDeactivation?[3,2]:[4,t.onDeactivation(n)];case 1:i.sent(),i.label=2;case 2:return[4,this._preDestroy(e,n)];case 3:return i.sent(),[2]}}))}))},t}(),Bt=function(t){this.id=T(),this.registry=t},qt=function(t){this.id=T(),this.registry=t};function Vt(t,n,e,i){!function(t){if(void 0!==t)throw new Error(M)}(n),Wt(l,t,e.toString(),i)}function Wt(t,n,e,i){var r=function(t){var n=[];if(Array.isArray(t)){var e=function(t){for(var n=new Set,e=0,i=t;e<i.length;e++){var r=i[e];if(n.has(r))return r;n.add(r)}}((n=t).map((function(t){return t.key})));if(void 0!==e)throw new Error("".concat(E," ").concat(e.toString()))}else n=[t];return n}(i),o={};Reflect.hasOwnMetadata(t,n)&&(o=Reflect.getMetadata(t,n));var a=o[e];if(void 0===a)a=[];else for(var c=function(t){if(r.some((function(n){return n.key===t.key})))throw new Error("".concat(E," ").concat(t.key.toString()))},u=0,s=a;u<s.length;u++)c(s[u]);a.push.apply(a,r),o[e]=a,Reflect.defineMetadata(t,o,n)}function Kt(t){return function(n,e,i){"number"==typeof i?Vt(n,e,i,t):function(t,n,e){if(void 0!==t.prototype)throw new Error(M);Wt(f,t.constructor,n,e)}(n,e,t)}}function Gt(t,n){Reflect.decorate(t,n)}function Lt(t,n){return function(e,i){n(e,i,t)}}function Ut(t,n,e){"number"==typeof e?Gt([Lt(e,t)],n):"string"==typeof e?Reflect.decorate([t],n,e):Gt([t],n)}function Ht(){return function(t){if(Reflect.hasOwnMetadata(h,t))throw new Error(C);var n=Reflect.getMetadata(p,t)||[];return Reflect.defineMetadata(h,n,t),t}}function Yt(t,n){return Kt(new L(t,n))}function zt(t){return Kt(new L(o,t))}function $t(t){return function(n){return function(e,i,r){if(void 0===n){var o="function"==typeof e?e.name:e.constructor.name;throw new Error("@inject called with undefined this could mean that the class ".concat(o," has ")+"a circular dependency problem. You can use a LazyServiceIdentifer to overcome this limitation.")}Kt(new L(t,n))(e,i,r)}}}var Qt=$t(s);function Zt(){return Kt(new L(u,!0))}function Jt(){return function(t,n,e){Vt(t,n,e,new L(c,!0))}}var Xt=$t(d);function tn(t){return function(n,e,i){Vt(n,e,i,new L(a,t))}}function nn(t,n){return function(){return function(e,i){var r=new L(t,i);if(Reflect.hasOwnMetadata(t,e.constructor))throw new Error(n);Reflect.defineMetadata(t,r,e.constructor)}}}var en=nn(y,"Cannot apply @postConstruct decorator multiple times in the same class"),rn=nn(v,"Cannot apply @preDestroy decorator multiple times in the same class"),on=r,an=i.QC,cn=i.bU,un=i.XK,sn=i.mc,dn=i.i0,ln=i.FU,fn=i.KK,hn=i.PG,pn=i.$Z,yn=i.OZ,vn=i.Yi,gn=i.A$,bn=i.id,wn=i.WQ,_n=i._G,mn=i.F$,An=i.tt,Sn=i.KT,In=i.dU,Tn=i.lq,Dn=i.kr,Cn=i.E3,En=i.VK,xn=i.w,Nn=i.je,Mn=i.Nu,Rn=i.if,jn=i.Fz;export{an as AsyncContainerModule,cn as BindingScopeEnum,un as BindingTypeEnum,sn as Container,dn as ContainerModule,ln as LazyServiceIdentifier,fn as METADATA_KEY,hn as MetadataReader,pn as TargetTypeEnum,yn as createTaggedDecorator,vn as decorate,gn as getServiceIdentifierAsString,bn as id,wn as inject,_n as injectable,mn as multiBindToService,An as multiInject,Sn as named,In as namedConstraint,Tn as optional,Dn as postConstruct,Cn as preDestroy,En as tagged,xn as taggedConstraint,Nn as targetName,Mn as traverseAncerstors,Rn as typeConstraint,jn as unmanaged};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,